[{"q0", "q1", "q2", "q3", "q4", "q5"}, closure(q, c) { /* delta1 := closure(q, d) { /* c := "a"; q0 := "q0"; q1 := "q1"; */ if (q == q0 && d == c) { return {q1}; } else { return {}; } }; delta2 := closure(q, d) { /* c := "b"; q0 := "q2"; q1 := "q3"; */ if (q == q0 && d == c) { return {q1}; } else { return {}; } }; m1 := {"q0", "q1"}; m2 := {"q2", "q3"}; q0 := "q4"; q1 := "q0"; q2 := "q2"; q3 := "q1"; q4 := "q3"; q5 := "q5"; */ if (q == q0 && c == "") { return {q1, q2}; } else if (q in {q3, q4} && c == "") { return {q5}; } else if (q in m1) { return delta1(q, c); } else if (q in m2) { return delta2(q, c); } else { return {}; } }, "q4", "q5"]
The regular expression (a+b) is recognized by the following NFA:
closure(q, c) { /* delta1 := closure(q, d) { /* c := "a"; q0 := "q0"; q1 := "q1"; */ if (q == q0 && d == c) { return {q1}; } else { return {}; } }; delta2 := closure(q, d) { /* c := "b"; q0 := "q2"; q1 := "q3"; */ if (q == q0 && d == c) { return {q1}; } else { return {}; } }; m1 := {"q0", "q1"}; m2 := {"q2", "q3"}; q0 := "q4"; q1 := "q0"; q2 := "q2"; q3 := "q1"; q4 := "q3"; q5 := "q5"; */ if (q == q0 && c == "") { return {q1, q2}; } else if (q in {q3, q4} && c == "") { return {q5}; } else if (q in m1) { return delta1(q, c); } else if (q in m2) { return delta2(q, c); } else { return {}; } }
q = q0
trying to compute delta(q0, a)
{"q1"}
trying to compute delta(q0, b)
{}
trying to compute delta(q0, "")
{}
q = q1
trying to compute delta(q1, a)
{}
trying to compute delta(q1, b)
{}
trying to compute delta(q1, "")
{"q5"}
q = q2
trying to compute delta(q2, a)
{}
trying to compute delta(q2, b)
{"q3"}
trying to compute delta(q2, "")
{}
q = q3
trying to compute delta(q3, a)
{}
trying to compute delta(q3, b)
{}
trying to compute delta(q3, "")
{"q5"}
q = q4
trying to compute delta(q4, a)
{}
trying to compute delta(q4, b)
{}
trying to compute delta(q4, "")
{"q0", "q2"}
q = q5
trying to compute delta(q5, a)
{}
trying to compute delta(q5, b)
{}
trying to compute delta(q5, "")
{}
states: {"q0", "q1", "q2", "q3", "q4", "q5"}

start state: q4

transitions:
[q0, a] |-> q1
[q1, ""] |-> q5
[q2, b] |-> q3
[q3, ""] |-> q5
[q4, ""] |-> q0
[q4, ""] |-> q2

accepting state: q5

[{"q0", "q1", "q2", "q3"}, closure(q, c) { /* delta0 := closure(q, d) { /* c := "a"; q0 := "q0"; q1 := "q1"; */ if (q == q0 && d == c) { return {q1}; } else { return {}; } }; m := {"q0", "q1"}; q0 := "q2"; q1 := "q0"; q2 := "q1"; q3 := "q3"; */ if (q == q0 && c == "") { return {q1, q3}; } else if (q == q2 && c == "") { return {q1, q3}; } else if (q in m) { return delta0(q, c); } else { return {}; } }, "q2", "q3"]
The regular expression a* is recognized by the following NFA:
closure(q, c) { /* delta0 := closure(q, d) { /* c := "a"; q0 := "q0"; q1 := "q1"; */ if (q == q0 && d == c) { return {q1}; } else { return {}; } }; m := {"q0", "q1"}; q0 := "q2"; q1 := "q0"; q2 := "q1"; q3 := "q3"; */ if (q == q0 && c == "") { return {q1, q3}; } else if (q == q2 && c == "") { return {q1, q3}; } else if (q in m) { return delta0(q, c); } else { return {}; } }
q = q0
trying to compute delta(q0, a)
{"q1"}
trying to compute delta(q0, b)
{}
trying to compute delta(q0, "")
{}
q = q1
trying to compute delta(q1, a)
{}
trying to compute delta(q1, b)
{}
trying to compute delta(q1, "")
{"q0", "q3"}
q = q2
trying to compute delta(q2, a)
{}
trying to compute delta(q2, b)
{}
trying to compute delta(q2, "")
{"q0", "q3"}
q = q3
trying to compute delta(q3, a)
{}
trying to compute delta(q3, b)
{}
trying to compute delta(q3, "")
{}
states: {"q0", "q1", "q2", "q3"}

start state: q2

transitions:
[q0, a] |-> q1
[q1, ""] |-> q0
[q1, ""] |-> q3
[q2, ""] |-> q0
[q2, ""] |-> q3

accepting state: q3

[{"q0", "q1", "q2", "q3", "q4", "q5", "q6", "q7"}, closure(q, c) { /* delta0 := closure(q, c) { /* delta1 := closure(q, d) { /* c := "a"; q0 := "q0"; q1 := "q1"; */ if (q == q0 && d == c) { return {q1}; } else { return {}; } }; delta2 := closure(q, d) { /* c := "b"; q0 := "q2"; q1 := "q3"; */ if (q == q0 && d == c) { return {q1}; } else { return {}; } }; m1 := {"q0", "q1"}; m2 := {"q2", "q3"}; q0 := "q4"; q1 := "q0"; q2 := "q2"; q3 := "q1"; q4 := "q3"; q5 := "q5"; */ if (q == q0 && c == "") { return {q1, q2}; } else if (q in {q3, q4} && c == "") { return {q5}; } else if (q in m1) { return delta1(q, c); } else if (q in m2) { return delta2(q, c); } else { return {}; } }; m := {"q0", "q1", "q2", "q3", "q4", "q5"}; q0 := "q6"; q1 := "q4"; q2 := "q5"; q3 := "q7"; */ if (q == q0 && c == "") { return {q1, q3}; } else if (q == q2 && c == "") { return {q1, q3}; } else if (q in m) { return delta0(q, c); } else { return {}; } }, "q6", "q7"]
The regular expression (a+b)* is recognized by the following NFA:
closure(q, c) { /* delta0 := closure(q, c) { /* delta1 := closure(q, d) { /* c := "a"; q0 := "q0"; q1 := "q1"; */ if (q == q0 && d == c) { return {q1}; } else { return {}; } }; delta2 := closure(q, d) { /* c := "b"; q0 := "q2"; q1 := "q3"; */ if (q == q0 && d == c) { return {q1}; } else { return {}; } }; m1 := {"q0", "q1"}; m2 := {"q2", "q3"}; q0 := "q4"; q1 := "q0"; q2 := "q2"; q3 := "q1"; q4 := "q3"; q5 := "q5"; */ if (q == q0 && c == "") { return {q1, q2}; } else if (q in {q3, q4} && c == "") { return {q5}; } else if (q in m1) { return delta1(q, c); } else if (q in m2) { return delta2(q, c); } else { return {}; } }; m := {"q0", "q1", "q2", "q3", "q4", "q5"}; q0 := "q6"; q1 := "q4"; q2 := "q5"; q3 := "q7"; */ if (q == q0 && c == "") { return {q1, q3}; } else if (q == q2 && c == "") { return {q1, q3}; } else if (q in m) { return delta0(q, c); } else { return {}; } }
q = q0
trying to compute delta(q0, a)
{"q1"}
trying to compute delta(q0, b)
{}
trying to compute delta(q0, "")
{}
q = q1
trying to compute delta(q1, a)
{}
trying to compute delta(q1, b)
{}
trying to compute delta(q1, "")
{"q5"}
q = q2
trying to compute delta(q2, a)
{}
trying to compute delta(q2, b)
{"q3"}
trying to compute delta(q2, "")
{}
q = q3
trying to compute delta(q3, a)
{}
trying to compute delta(q3, b)
{}
trying to compute delta(q3, "")
{"q5"}
q = q4
trying to compute delta(q4, a)
{}
trying to compute delta(q4, b)
{}
trying to compute delta(q4, "")
{"q0", "q2"}
q = q5
trying to compute delta(q5, a)
{}
trying to compute delta(q5, b)
{}
trying to compute delta(q5, "")
{"q4", "q7"}
q = q6
trying to compute delta(q6, a)
{}
trying to compute delta(q6, b)
{}
trying to compute delta(q6, "")
{"q4", "q7"}
q = q7
trying to compute delta(q7, a)
{}
trying to compute delta(q7, b)
{}
trying to compute delta(q7, "")
{}
states: {"q0", "q1", "q2", "q3", "q4", "q5", "q6", "q7"}

start state: q6

transitions:
[q0, a] |-> q1
[q1, ""] |-> q5
[q2, b] |-> q3
[q3, ""] |-> q5
[q4, ""] |-> q0
[q4, ""] |-> q2
[q5, ""] |-> q4
[q5, ""] |-> q7
[q6, ""] |-> q4
[q6, ""] |-> q7

accepting state: q7

[{"q0", "q1", "q2", "q3", "q4", "q5", "q6", "q7"}, closure(q, c) { /* delta1 := closure(q, c) { /* delta1 := closure(q, d) { /* c := "a"; q0 := "q0"; q1 := "q1"; */ if (q == q0 && d == c) { return {q1}; } else { return {}; } }; delta2 := closure(q, d) { /* c := "b"; q0 := "q2"; q1 := "q3"; */ if (q == q0 && d == c) { return {q1}; } else { return {}; } }; m1 := {"q0", "q1"}; m2 := {"q2", "q3"}; q0 := "q4"; q1 := "q0"; q2 := "q2"; q3 := "q1"; q4 := "q3"; q5 := "q5"; */ if (q == q0 && c == "") { return {q1, q2}; } else if (q in {q3, q4} && c == "") { return {q5}; } else if (q in m1) { return delta1(q, c); } else if (q in m2) { return delta2(q, c); } else { return {}; } }; delta2 := closure(q, d) { /* c := "a"; q0 := "q6"; q1 := "q7"; */ if (q == q0 && d == c) { return {q1}; } else { return {}; } }; m1 := {"q0", "q1", "q2", "q3", "q4", "q5"}; m2 := {"q6", "q7"}; q2 := "q5"; q3 := "q6"; */ if (q == q2 && c == "") { return {q3}; } else if (q in m1) { return delta1(q, c); } else if (q in m2) { return delta2(q, c); } else { return {}; } }, "q4", "q7"]
The regular expression (a+b)a is recognized by the following NFA:
closure(q, c) { /* delta1 := closure(q, c) { /* delta1 := closure(q, d) { /* c := "a"; q0 := "q0"; q1 := "q1"; */ if (q == q0 && d == c) { return {q1}; } else { return {}; } }; delta2 := closure(q, d) { /* c := "b"; q0 := "q2"; q1 := "q3"; */ if (q == q0 && d == c) { return {q1}; } else { return {}; } }; m1 := {"q0", "q1"}; m2 := {"q2", "q3"}; q0 := "q4"; q1 := "q0"; q2 := "q2"; q3 := "q1"; q4 := "q3"; q5 := "q5"; */ if (q == q0 && c == "") { return {q1, q2}; } else if (q in {q3, q4} && c == "") { return {q5}; } else if (q in m1) { return delta1(q, c); } else if (q in m2) { return delta2(q, c); } else { return {}; } }; delta2 := closure(q, d) { /* c := "a"; q0 := "q6"; q1 := "q7"; */ if (q == q0 && d == c) { return {q1}; } else { return {}; } }; m1 := {"q0", "q1", "q2", "q3", "q4", "q5"}; m2 := {"q6", "q7"}; q2 := "q5"; q3 := "q6"; */ if (q == q2 && c == "") { return {q3}; } else if (q in m1) { return delta1(q, c); } else if (q in m2) { return delta2(q, c); } else { return {}; } }
q = q0
trying to compute delta(q0, a)
{"q1"}
trying to compute delta(q0, b)
{}
trying to compute delta(q0, "")
{}
q = q1
trying to compute delta(q1, a)
{}
trying to compute delta(q1, b)
{}
trying to compute delta(q1, "")
{"q5"}
q = q2
trying to compute delta(q2, a)
{}
trying to compute delta(q2, b)
{"q3"}
trying to compute delta(q2, "")
{}
q = q3
trying to compute delta(q3, a)
{}
trying to compute delta(q3, b)
{}
trying to compute delta(q3, "")
{"q5"}
q = q4
trying to compute delta(q4, a)
{}
trying to compute delta(q4, b)
{}
trying to compute delta(q4, "")
{"q0", "q2"}
q = q5
trying to compute delta(q5, a)
{}
trying to compute delta(q5, b)
{}
trying to compute delta(q5, "")
{"q6"}
q = q6
trying to compute delta(q6, a)
{"q7"}
trying to compute delta(q6, b)
{}
trying to compute delta(q6, "")
{}
q = q7
trying to compute delta(q7, a)
{}
trying to compute delta(q7, b)
{}
trying to compute delta(q7, "")
{}
states: {"q0", "q1", "q2", "q3", "q4", "q5", "q6", "q7"}

start state: q4

transitions:
[q0, a] |-> q1
[q1, ""] |-> q5
[q2, b] |-> q3
[q3, ""] |-> q5
[q4, ""] |-> q0
[q4, ""] |-> q2
[q5, ""] |-> q6
[q6, a] |-> q7

accepting state: q7

